Describe Neovim
    Before all
        let ver = split(execute('version'), '\n')[0]
        if ver !~# 'NVIM v0.4.0'
            throw 'Neovim version is too old: ' . ver
        endif
    End

    Before each
        view! README.md
        normal! gg0

        " Move to introduction paragraph
        normal! }j27l
    End

    After each
        let w = 2
        while w <= winnr('$')
            silent! execute w . 'close!'
            let w += 1
        endwhile
        silent! execute 'bwipeout!' join(range(1, bufnr('$')), ' ')
    End

    Describe :GitMessenger
        It opens popup with floating window
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)
            Assert KeyExists(p, 'bufnr')

            let lines = getbufline(p.bufnr, 1, '$')
            let msg = string(lines)
            Assert True(len(lines) >= 6, msg)

            let history = lines[1]
            Assert Match(history, '^ History: #0$', msg)

            let commit = lines[2]
            Assert Match(commit, '^ Commit: [[:xdigit:]]\{7,}$', msg)

            let author = lines[3]
            Assert Match(author, '^ Author: \S\+ <[^>]\+>$', msg)

            let date = lines[4]
            Assert Match(date, '^ Date: .\+$', msg)

            let summary = lines[6]
            Assert NotEmpty(summary, msg)

            let hash = matchstr(commit, '^ Commit: \zs[[:xdigit:]]\{7,}$')
            let out = system('git show -s ' . hash)
            Assert Falsy(v:shell_error, out)
            Assert True(stridx(out, summary) >= 0, string(out) . ' should contain ' . string(summary))
        End

        It moves cursor into popup and close it within the popup
            let opener_id = win_getid()

            GitMessenger
            " Wait for popup
            Assert IsNotNone(GetPopup())

            Assert Equals(win_getid(), opener_id)

            " Move cursor into popup
            GitMessenger

            let popup_id = win_getid()
            Assert NotEquals(popup_id, opener_id)
            Assert Exists('b:__gitmessenger_popup')

            " Close popup
            GitMessenger

            Assert Equals(win_getid(), opener_id)
            Assert IsNone(GetPopupNoWait())
        End

        It shows an error message when commit is not found
            " Open empty buffer so it's not managed by Git
            enew!

            GitMessenger
            Assert IsNone(GetPopup())

            let mes = execute('message')
            Assert Match(mes, '\<git-messenger: ', mes)
        End
    End

    Describe Popup window
        It is closed on CursorMoved
            GitMessenger
            Assert IsNotNone(GetPopup())

            normal! h
            doautocmd CursorMoved

            Assert IsNone(GetPopupNoWait())
        End

        It is closed on BufEnter
            GitMessenger
            Assert IsNotNone(GetPopup())

            new!

            Assert IsNone(GetPopupNoWait())
        End

        It is closed on BufEnter
            GitMessenger
            Assert IsNotNone(GetPopup())

            vnew
            wincmd p

            Assert IsNone(GetPopupNoWait())
        End

        It is closed on WinEnter but not on BufEnter
            GitMessenger
            Assert IsNotNone(GetPopup())

            " Creates another window, but it contains the same buffer as
            " current one.
            vsplit

            " Move to another window causes WinEnter, but buffer is the same
            " so BufEnter won't be triggered
            wincmd p

            Assert IsNone(GetPopupNoWait())
        End

        It is closed on BufLeave in popup window (#13)
            GitMessenger
            Assert IsNotNone(GetPopup())

            let prev_bufnr = bufnr('%')

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            bnext

            Assert False(exists('b:__gitmessenger_popup'))
            Assert IsNone(GetPopupNoWait())
            Assert Equals(prev_bufnr, bufnr('%'))
        End

        It is closed on q
            GitMessenger
            Assert IsNotNone(GetPopup())

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            normal q

            Assert IsNone(GetPopupNoWait())
        End

        It shows older commit on o
            GitMessenger
            Assert IsNotNone(GetPopup())

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            Assert Equals(getline(2), ' History: #0')

            normal o

            let found = WaitUntil({-> getline(2) ==# ' History: #1'})
            Assert True(found, 'Got line: ' . string(getline(2)))

            normal o

            let found = WaitUntil({-> getline(2) ==# ' History: #2'})
            Assert True(found, 'Got line: ' . string(getline(2)))
        End

        It shows newer commit on O
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            Assert Equals(getline(2), ' History: #0')

            normal o
            call WaitUntil({-> getline(2) ==# ' History: #1'})

            normal o
            call WaitUntil({-> getline(2) ==# ' History: #2'})

            normal O

            let found = WaitUntil({-> getline(2) ==# ' History: #1'})
            Assert True(found, 'Got line: ' . string(getline(2)))

            normal O

            let found = WaitUntil({-> getline(2) ==# ' History: #0'})
            Assert True(found, 'Got line: ' . string(getline(2)))

            " Check older again
            normal o

            let found = WaitUntil({-> getline(2) ==# ' History: #1'})
            Assert True(found, 'Got line: ' . string(getline(2)))
        End

        It shows diff hunks of current file on d
            GitMessenger
            Assert IsNotNone(GetPopup())

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            " Check diff is not shown
            let lines = getline(1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')
            Assert Equals(idx, -1, string(lines))

            normal d

            let found = WaitUntil({-> index(getline(1, '$'), ' diff --git a/README.md b/README.md') !=# -1})
            Assert True(found, 'Got lines: ' . string(getline(1, '$')))
        End

        It shows all diff hunks on D
            GitMessenger
            Assert IsNotNone(GetPopup())

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            " Check diff is not shown
            let lines = getline(1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')
            Assert Equals(idx, -1, string(lines))

            normal D

            let found = WaitUntil({-> index(getline(1, '$'), ' diff --git a/README.md b/README.md') !=# -1})
            Assert True(found, 'Got lines: ' . string(getline(1, '$')))
        End

        Describe diff support
            " LICENSE and README.md was added at the same commit.
            " So 'current' diffs in LICENSE only shows changes of LICENSE.
            " And 'all' diffs in LICENSE shows changes of both LICENSE and README.md
            Before all
                let LicenseDiffExists = {-> index(getline(1, '$'), ' diff --git a/LICENSE b/LICENSE') !=# -1}
                let ReadmeDiffExists = {-> index(getline(1, '$'), ' diff --git a/README.md b/README.md') !=# -1}
            End

            Before each
                let saved_include_diff = g:git_messenger_include_diff
                view! LICENSE
                normal! gg0
            End

            After each
                let g:git_messenger_include_diff = saved_include_diff
            End

            It switches diff from 'current' to 'all' by d -> D
                GitMessenger
                Assert IsNotNone(GetPopup())
                GitMessenger
                Assert Exists('b:__gitmessenger_popup')

                normal d

                let found = WaitUntil(LicenseDiffExists)
                let lines = 'Got lines: ' . string(getline(1, '$'))

                Assert True(found, lines)
                Assert False(ReadmeDiffExists(), lines)

                normal D

                let found = WaitUntil(ReadmeDiffExists)
                let lines = 'Got lines: ' . string(getline(1, '$'))
                Assert True(found, lines)
                Assert True(LicenseDiffExists(), lines)
            End

            It switches diff from 'all' to 'current' by D -> d
                GitMessenger
                Assert IsNotNone(GetPopup())
                GitMessenger
                Assert Exists('b:__gitmessenger_popup')

                normal D

                let found = WaitUntil(LicenseDiffExists)
                let lines = 'Got lines: ' . string(getline(1, '$'))
                Assert True(found, lines)
                Assert True(ReadmeDiffExists(), lines)

                normal d

                let removed = WaitWhile(ReadmeDiffExists)
                let lines = 'Got lines: ' . string(getline(1, '$'))
                Assert True(removed, lines)
                Assert True(LicenseDiffExists(), lines)
            End

            It does nothing on d -> d
                GitMessenger
                Assert IsNotNone(GetPopup())
                GitMessenger
                Assert Exists('b:__gitmessenger_popup')

                for _ in range(3)
                    normal d
                    let found = WaitUntil(LicenseDiffExists)
                    let lines = 'Got lines: ' . string(getline(1, '$'))
                    Assert True(found, lines)
                    Assert False(ReadmeDiffExists(), lines)
                endfor
            End

            It does nothing on D -> D
                GitMessenger
                Assert IsNotNone(GetPopup())
                GitMessenger
                Assert Exists('b:__gitmessenger_popup')

                for _ in range(3)
                    normal D
                    let found = WaitUntil(ReadmeDiffExists)
                    let lines = 'Got lines: ' . string(getline(1, '$'))
                    Assert True(found, lines)
                    Assert True(LicenseDiffExists(), lines)
                endfor
            End

            It switches diff from 'all' and 'current' repeatedly
                GitMessenger
                Assert IsNotNone(GetPopup())
                GitMessenger
                Assert Exists('b:__gitmessenger_popup')

                let idx = 0
                for m in repeat(['D', 'd'], 3)
                    execute 'normal' m
                    if m ==# 'd'
                        let ok = WaitWhile(ReadmeDiffExists)
                    else
                        let ok = WaitUntil(ReadmeDiffExists)
                    endif
                    let lines = printf('Got lines #%d (%s): %s', idx, m, string(getline(1, '$')))
                    Assert True(ok, lines)
                    Assert True(LicenseDiffExists(), lines)
                    let idx += 1
                endfor
            End

            It shows 'all' diff after 'current' diff is shown by g:git_messenger_include_diff
                let g:git_messenger_include_diff = 'current'
                GitMessenger
                Assert IsNotNone(GetPopup())
                GitMessenger
                Assert Exists('b:__gitmessenger_popup')

                let lines = 'Got lines: ' . string(getline(1, '$'))
                Assert True(LicenseDiffExists(), lines)
                Assert False(ReadmeDiffExists(), lines)

                normal D

                let found = WaitUntil(ReadmeDiffExists)
                let lines = 'Got lines: ' . string(getline(1, '$'))
                Assert True(found, lines)
                Assert True(LicenseDiffExists(), lines)
            End

            It shows 'current' diff after 'all' diff is shown by g:git_messenger_include_diff
                let g:git_messenger_include_diff = 'all'
                GitMessenger
                Assert IsNotNone(GetPopup())
                GitMessenger
                Assert Exists('b:__gitmessenger_popup')

                let lines = 'Got lines: ' . string(getline(1, '$'))
                Assert True(LicenseDiffExists(), lines)
                Assert True(ReadmeDiffExists(), lines)

                normal d

                let removed = WaitWhile(ReadmeDiffExists)
                let lines = 'Got lines: ' . string(getline(1, '$'))
                Assert True(removed, lines)
                Assert True(LicenseDiffExists(), lines)
            End
        End

        It preserves diff hunks after going back to older commit
            GitMessenger
            Assert IsNotNone(GetPopup())

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            normal d

            let found = WaitUntil({-> index(getline(1, '$'), ' diff --git a/README.md b/README.md') !=# -1})
            Assert True(found, 'Got lines: ' . string(getline(1, '$')))

            normal o
            call WaitUntil({-> getline(2) ==# ' History: #1'})

            let lines = getline(1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')
            Assert Equals(idx, -1, string(lines))

            normal O
            call WaitUntil({-> getline(2) ==# ' History: #0'})

            " Check diff is restored
            let lines = getline(1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')
            Assert NotEqual(idx, -1, string(lines))
        End
    End

    Describe g:git_messenger_include_diff
        Before all
            let saved = g:git_messenger_include_diff
        End

        After all
            let g:git_messenger_include_diff = saved
        End

        It shows diff hunks of current file in opened popup
            let g:git_messenger_include_diff = 'current'
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            let lines = getbufline(p.bufnr, 1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')

            Assert NotEqual(idx, -1, string(lines))
        End

        It shows diff hunks of current file for older/newer commits
            let g:git_messenger_include_diff = 'current'

            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            normal o
            call WaitUntil({-> getline(2) ==# ' History: #1'})

            let lines = getbufline(p.bufnr, 1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')
            Assert NotEqual(idx, -1, string(lines))

            normal O
            call WaitUntil({-> getline(2) ==# ' History: #0'})

            let lines = getbufline(p.bufnr, 1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')
            Assert NotEqual(idx, -1, string(lines))
        End

        It shows all diff hunks in opened popup
            let g:git_messenger_include_diff = 'all'
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            let lines = getbufline(p.bufnr, 1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')

            Assert NotEqual(idx, -1, string(lines))
        End

        It shows all diff hunks for older/newer commits
            let g:git_messenger_include_diff = 'all'

            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            normal o
            call WaitUntil({-> getline(2) ==# ' History: #1'})

            let lines = getbufline(p.bufnr, 1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')
            Assert NotEqual(idx, -1, string(lines))

            normal O
            call WaitUntil({-> getline(2) ==# ' History: #0'})

            let lines = getbufline(p.bufnr, 1, '$')
            let idx = index(lines, ' diff --git a/README.md b/README.md')
            Assert NotEqual(idx, -1, string(lines))
        End
    End

    Describe <Plug>(git-messenger)
        It is mapped to <Leader>gm by default
            let m = mapcheck('<Leader>gm')
            Assert Equal(m, '<Plug>(git-messenger)')
        End

        It invokes :GitMessenger
            execute 'normal' "\<Plug>(git-messenger)"

            let p = GetPopup()
            Assert IsNotNone(p)
            Assert KeyExists(p, 'bufnr')
        End
    End

    Describe g:git_messenger_max_popup_height
        Before all
            let saved = g:git_messenger_max_popup_height
        End

        After all
            let g:git_messenger_max_popup_height = saved
        End

        It limits height of popup window
            let g:git_messenger_max_popup_height = 4

            GitMessenger
            Assert IsNotNone(GetPopup())

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            Assert Equal(winheight(0), 4)
        End

        It does not affect height when content has less height
            let g:git_messenger_max_popup_height = 20

            GitMessenger
            Assert IsNotNone(GetPopup())

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            let h = winheight(0)
            Assert True(h < 20, h)
        End
    End

    Describe g:git_messenger_max_popup_width
        Before all
            let saved = g:git_messenger_max_popup_width
        End

        After all
            let g:git_messenger_max_popup_width = saved
        End

        It limits width of popup window
            let g:git_messenger_max_popup_width = 4

            GitMessenger
            Assert IsNotNone(GetPopup())

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            Assert Equal(winwidth(0), 4)
        End

        It does not affect width when content has less width
            " Use first line of LICENSE file because commit message of the
            " line is smaller. In this test case, it is important that width
            " of content is small.
            view! LICENSE
            normal! gg0

            let g:git_messenger_max_popup_width = winwidth(0)

            GitMessenger
            Assert IsNotNone(GetPopup())

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            let w = winwidth(0)
            Assert True(w < g:git_messenger_max_popup_width, w . ' v.s. ' . g:git_messenger_max_popup_width)
        End
    End
End
