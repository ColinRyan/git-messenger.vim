Describe Neovim
    Before all
        redir => ver
            version
        redir END
        let ver = split(ver, '\n')[0]
        if ver !~# 'NVIM v0.4.0'
            throw 'Neovim version is too old: ' . ver
        endif
    End

    Before each
        view! README.md
        normal! gg0

        " Move to introduction paragraph
        normal! }j27l
    End

    After each
        let w = 2
        while w <= winnr('$')
            silent! execute w . 'close!'
            let w += 1
        endwhile
        silent! execute 'bwipeout!' join(range(1, bufnr('$')), ' ')
    End

    Describe :GitMessenger
        It opens popup with floating window
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)
            Assert KeyExists(p, 'bufnr')

            let lines = getbufline(p.bufnr, 1, '$')
            let msg = string(lines)
            Assert True(len(lines) >= 6, msg)

            let history = lines[1]
            Assert Match(history, '^ History: #0$', msg)

            let commit = lines[2]
            Assert Match(commit, '^ Commit: [[:xdigit:]]\{7,}$', msg)

            let author = lines[3]
            Assert Match(author, '^ Author: \S\+ <[^>]\+>$', msg)

            let date = lines[4]
            Assert Match(date, '^ Date: .\+$', msg)

            let summary = lines[6]
            Assert NotEmpty(summary, msg)

            let hash = matchstr(commit, '^ Commit: \zs[[:xdigit:]]\{7,}$')
            let out = system('git show -s ' . hash)
            Assert Falsy(v:shell_error, out)
            Assert True(stridx(out, summary) >= 0, string(out) . ' should contain ' . string(summary))
        End

        It moves cursor into popup and close it within the popup
            let opener_id = win_getid()

            GitMessenger
            " Wait for popup
            Assert IsNotNone(GetPopup())

            Assert Equals(win_getid(), opener_id)

            " Move cursor into popup
            GitMessenger

            let popup_id = win_getid()
            Assert NotEquals(popup_id, opener_id)
            Assert Exists('b:__gitmessenger_popup')

            " Close popup
            GitMessenger

            Assert Equals(win_getid(), opener_id)
            Assert IsNone(GetPopupNoWait())
        End
    End

    Describe Popup window
        It is closed on CursorMoved
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            normal! h
            doautocmd CursorMoved

            let p = GetPopupNoWait()
            Assert IsNone(p)
        End

        It is closed on BufEnter
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            new!

            let p = GetPopupNoWait()
            Assert IsNone(p)
        End

        It is closed on WinEnter
            Assert Skip(
              \ 'This test does not pass since WinEnter is not hooked for now. ' .
              \ 'Even if WinEnter is hooked, it still does not work because plugin-git-messenger-buf-enter ' .
              \ 'does not close popup when entering the operner buffer. If stopping this behavior, it causes ' .
              \ 'an error on go forward/back because updating popup closes the floating window at first and ' .
              \ 'plugin-git-messenger-buf-enter tries to close the already-closed popup'
              \ )

            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            vsplit
            wincmd p

            let p = GetPopupNoWait()
            Assert IsNone(p)
        End

        It is closed on q
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            normal q

            let p = GetPopupNoWait()
            Assert IsNone(p)
        End

        It shows older commit on o
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            Assert Equals(getline(2), ' History: #0')

            normal o

            let found = WaitUntil({-> getline(2) ==# ' History: #1'})
            Assert True(found, 'Got line: ' . getline(2))
        End

        It shows newer commit on O
            GitMessenger

            let p = GetPopup()
            Assert IsNotNone(p)

            GitMessenger
            Assert Exists('b:__gitmessenger_popup')

            Assert Equals(getline(2), ' History: #0')

            normal o

            let found = WaitUntil({-> getline(2) ==# ' History: #1'})
            Assert True(found, 'Got line: ' . getline(2))

            normal O

            let found = WaitUntil({-> getline(2) ==# ' History: #0'})
            Assert True(found, 'Got line: ' . getline(2))

            normal o

            let found = WaitUntil({-> getline(2) ==# ' History: #1'})
            Assert True(found, 'Got line: ' . getline(2))
        End
    End
End
